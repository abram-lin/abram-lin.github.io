<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 仰海的比特记忆</title>
    <link>https://yanghai.site/tags/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on 仰海的比特记忆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>abram.lin.me@gmail.com (Abram)</managingEditor>
    <webMaster>abram.lin.me@gmail.com (Abram)</webMaster>
    <lastBuildDate>Sun, 13 May 2018 20:46:37 +0000</lastBuildDate>
    
	<atom:link href="https://yanghai.site/tags/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用wget下载整个网页（img，CSS，js）</title>
      <link>https://yanghai.site/posts/2018-05-13-%E4%BD%BF%E7%94%A8wget%E4%B8%8B%E8%BD%BD%E6%95%B4%E4%B8%AA%E7%BD%91%E9%A1%B5imgcssjs/</link>
      <pubDate>Sun, 13 May 2018 20:46:37 +0000</pubDate>
      <author>abram.lin.me@gmail.com (Abram)</author>
      <guid>https://yanghai.site/posts/2018-05-13-%E4%BD%BF%E7%94%A8wget%E4%B8%8B%E8%BD%BD%E6%95%B4%E4%B8%AA%E7%BD%91%E9%A1%B5imgcssjs/</guid>
      <description>系统：macOS High Sierra（10.13.3）
使用brew安装wget brew install wget  使用下面命令下载网页
wget -p -k -e robots=off -U &#39;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.6) Gecko/20070802 SeaMonkey/1.1.4&#39; https://www.google.com  </description>
    </item>
    
    <item>
      <title>GitHub多账户及SSH密钥配置</title>
      <link>https://yanghai.site/posts/2018-04-23-github%E5%A4%9A%E8%B4%A6%E6%88%B7%E5%8F%8Assh%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 23 Apr 2018 17:13:45 +0000</pubDate>
      <author>abram.lin.me@gmail.com (Abram)</author>
      <guid>https://yanghai.site/posts/2018-04-23-github%E5%A4%9A%E8%B4%A6%E6%88%B7%E5%8F%8Assh%E5%AF%86%E9%92%A5%E9%85%8D%E7%BD%AE/</guid>
      <description>创建新的SSH密钥，并添加到ssh-agent 创建密钥
ssh-keygen -t rsa -b 4096 -C &amp;quot;your_email@example.com&amp;quot;  输入保存密钥的绝对路径和文件名，如/Users/Steve/.ssh/new_id_rsa
Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]  两次输入确认密钥的密码
Enter passphrase (empty for no passphrase): [Type a passphrase] Enter same passphrase again: [Type passphrase again]  把密钥添加到ssh-agent
把ssh-agent在后台启动
eval &amp;quot;$(ssh-agent -s)&amp;quot;  配置~/.ssh/config文件，如果没有该文件，通过touch config命令创建。注意HostName github.com
Host github.com HostName github.com AddKeysToAgent yes UseKeychain yes IdentityFile ~/.ssh/new_id_rsa  把私钥添加到ssh-agent并存入keychain，执行命令会要求你输入密码
ssh-add -K ~/.ssh/new_id_rsa  添加SSH公钥到你的GitHub账户 把公钥复制到剪贴板</description>
    </item>
    
    <item>
      <title>告别迅雷，aria2安装并设置开机启动</title>
      <link>https://yanghai.site/posts/2018-04-16-%E5%91%8A%E5%88%AB%E8%BF%85%E9%9B%B7aria2%E5%AE%89%E8%A3%85%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Mon, 16 Apr 2018 21:10:31 +0000</pubDate>
      <author>abram.lin.me@gmail.com (Abram)</author>
      <guid>https://yanghai.site/posts/2018-04-16-%E5%91%8A%E5%88%AB%E8%BF%85%E9%9B%B7aria2%E5%AE%89%E8%A3%85%E5%B9%B6%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</guid>
      <description>系统：macOS High Sierra（10.13.3）
国内的下载工具，一点都不纯粹，总要植入广告、商城等等无关的功能，像某度网盘这种还会搞限速，很烦。好在有Aria2这神器。Aria2 是一款轻量的、支持多协议以及多线程的下载工具，它同时支持了 HTTP/HTTPS, FTP, SFTP, BitTorrent 和 Metalink 多种下载方式。它是用命令行交互的，但是已经有人为它开发了交互界面，不用担心太难操作。下面跟着步骤来，安装成功后从此告别限速。
1.安装Homebrew Homebrew是macOS上著名的包管理工具,它可以方便地对应用以及各种插件进行管理。确保已经安装Xcode后在Terminal（终端）执行以下命令：
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;  更新Homebrew，依次执行下面命令
brew update  brew upgrade  2.安装aria2 brew install aria2  配置aria2，依次执行下面命令
cd ~  mkdir .aria2  cd .aria2  touch aria2.conf  注意配置文件要放在上面的路径上（~/.aria2/aria2.conf），aria2在执行时会检查这个路径，如果这个路径存在配置文件，就不用自己再指定配置文件了。这样还能方便设置开机自启动aria2。
修改配置文件
打开Finder（访达），按下组合键Shift+Cmd+G，输入Shift+Cmd+G，回车，双击打开aria2.conf文件，填入下面的配置，参考：
## 文件保存相关 ## # 文件的保存路径 (可使用绝对路径或相对路径), 默认: 当前启动位置 dir=/Users/自己的用户名/Downloads # 启用磁盘缓存, 0 为禁用缓存, 需 1.16 以上版本, 默认:16M #disk-cache=32M # 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc # 预分配所需时间: none &amp;lt; falloc ?</description>
    </item>
    
    <item>
      <title>控制macOS的开机启动</title>
      <link>https://yanghai.site/posts/2018-04-11-%E6%8E%A7%E5%88%B6macos%E7%9A%84%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Wed, 11 Apr 2018 20:10:45 +0000</pubDate>
      <author>abram.lin.me@gmail.com (Abram)</author>
      <guid>https://yanghai.site/posts/2018-04-11-%E6%8E%A7%E5%88%B6macos%E7%9A%84%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</guid>
      <description>Mac开机启动的配置与其他类Unix系统相比较麻烦，Linux配置rc.local文件即可。 macOS系统上开机启动这个叫法不准确，应该叫“自启动”或者“登录时启动”。macOS上启动项可分为登陆项（Login Items）和启动项（Startup Items）。Login items在用户登录后立即启动并一直运行，直到用户退出登录或者手动终止才会停止运行。Startup items苹果官方不推荐再使用，Startup items在系统装载的最后阶段启动。详见官方文档。
下面简要介绍如何配置自启动项。
使用登录项添加自启动项 这种方式支持有用户界面的程序。 进入设置-&amp;gt;用户与群组-&amp;gt;登录项，点击+号找到想自动启动的软件，选择后按确定即可。
删除自启动项，重新进入登录项，选中目标项点击减号后确定即可。
使用launchctl工具添加启动项 从OS X 10.4 Tiger开始，Apple要求开发者使用launch daemons and agents配置自启动项，launch daemons和launch agents由launchd进程管理。launchd是macOS下用于初始化系统环境的关键进程，它是内核装载成功之后在OS环境下启动的第一个进程。采用这种方式来配置自启动项只需要一个plist文件，该plist文件存在于以下目录，各目录决定了其启动的先后和拥有的权限： ~/Library/LaunchAgents //特定用户登录后以当前用户启动，第三方程序一般都放这里 /Library/LaunchAgents //任一用户登录后以当前用户启动，管理员使用 /System/Library/LaunchAgents //系统组件，任一用户登录后以当前用户启动 /Library/LaunchDaemons //系统装载时以root用户启动，管理员使用 /System/Library/LaunchDaemons //系统组件，系统装载时以root用户启动
目录区别： /System/Library //存放Apple开发的系统组件。 /Library //存放系统管理员安装的程序。 ~/Library //存放普通用户安装的程序。
launch daemon和launch agents区别： 它们本质上都是守护进程，launch daemons在系统装载时启动，属于所有用户；launch agents是某个用户拥有的程序，在这个用户登录后启动。
创建plist文件
vi ~/Library/LaunchAgents/aria2.plist  写入以下xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;encoding=&amp;quot;utf-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC&amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt; &amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;aria2&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;string&amp;gt;/usr/local/bin/aria2c&amp;lt;/string&amp;gt; &amp;lt;string&amp;gt;-D&amp;lt;/string&amp;gt; &amp;lt;/array&amp;gt; &amp;lt;key&amp;gt;WorkingDirectory&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;/Users/Roy/Downloads&amp;lt;/string&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;/plist&amp;gt;  键值说明见launchd.</description>
    </item>
    
    <item>
      <title>Mac-OS下如何把软件卸载干净？</title>
      <link>https://yanghai.site/posts/2018-04-02-mac-os%E4%B8%8B%E5%A6%82%E4%BD%95%E6%8A%8A%E8%BD%AF%E4%BB%B6%E5%8D%B8%E8%BD%BD%E5%B9%B2%E5%87%80/</link>
      <pubDate>Mon, 02 Apr 2018 17:13:10 +0000</pubDate>
      <author>abram.lin.me@gmail.com (Abram)</author>
      <guid>https://yanghai.site/posts/2018-04-02-mac-os%E4%B8%8B%E5%A6%82%E4%BD%95%E6%8A%8A%E8%BD%AF%E4%BB%B6%E5%8D%B8%E8%BD%BD%E5%B9%B2%E5%87%80/</guid>
      <description> 系统：macOS High Sierra（10.13.3）
软件安装方式 1.dmg文件安装 2.App Store安装（卸载方法与dmg文件安装一致） 3.pkg安装包安装 4.Homebrew等包管理器安装
具体卸载方法 卸载dmg文件安装的软件 dmg是苹果电脑上专用的磁盘镜像（disk image）文件，类似于Windows平台上的iso镜像，dmg类似于一个压缩文档，支持压缩与加密，将程序与文档打包成dmg是一种比较流行的软件发布形式。
macOS下的程序，通常不像Windows电脑下的那么复杂，不会有注册表，DLL什么的。找出安装dmg时创建的文件，删除掉这些文件即可把软件卸载干净。安装dmg一般创建了这些文件：/Applications目录中的主程序；~/Library/Preferences/目录中后缀名为“.plist”的配置文件；软件处理的数据文件，图片处理软件一般在~/Pictures目录找，其他程序一般在~/Documents目录找。找出这些文件删除即可。
卸载pkg安装包安装的软件 不同的操作系统都有专属于自己的软件安装包格式。如Ubuntu系统上的deb安装包，Windows系统上的msi安装包等。 macOS系统一般使用dmg发布软件；当App有一些特定的需求，比如：向系统配置面板写配置程序、安装屏幕保护程序、读写特定的目录与文件等，才会使用pkg软件安装包格式。 pkg文件安装的软件卸载较麻烦，需要借助命令行。 安装的 pkg 软件包，都记录在以下
/Library/Receipts/InstallHistory.plist /private/var/db/receipts  列出已经安装的pkg，显示的是pkg的ID
$ pkgutil --pkgs  查看目标pkg的信息
$ pkgutil --pkg-info pkg-name  由pkgutil &amp;ndash;pkg-info获取到的location地址，删除即可。以上图为例
$ sudo rm -r /usr/local/aria2  删除安装包记录
$ sudo pkgutil --forget aria2  卸载Homebrew安装的软件 $ brew uninstall app-name  </description>
    </item>
    
  </channel>
</rss>